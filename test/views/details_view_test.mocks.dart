// Mocks generated by Mockito 5.4.4 from annotations
// in fetosense_remote_flutter/test/views/details_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i8;

import 'package:appwrite/appwrite.dart' as _i5;
import 'package:appwrite/models.dart' as _i3;
import 'package:appwrite/src/client.dart' as _i2;
import 'package:fetosense_remote_flutter/core/model/marker_indices.dart'
    as _i11;
import 'package:fetosense_remote_flutter/core/model/test_model.dart' as _i4;
import 'package:fetosense_remote_flutter/core/utils/intrepretations2.dart'
    as _i10;
import 'package:fetosense_remote_flutter/core/view_models/test_crud_model.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentList_1 extends _i1.SmartFake implements _i3.DocumentList {
  _FakeDocumentList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocument_2 extends _i1.SmartFake implements _i3.Document {
  _FakeDocument_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTest_3 extends _i1.SmartFake implements _i4.Test {
  _FakeTest_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Databases].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabases extends _i1.Mock implements _i5.Databases {
  MockDatabases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  _i6.Future<_i3.DocumentList> listDocuments({
    required String? databaseId,
    required String? collectionId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDocuments,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #queries: queries,
          },
        ),
        returnValue: _i6.Future<_i3.DocumentList>.value(_FakeDocumentList_1(
          this,
          Invocation.method(
            #listDocuments,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #queries: queries,
            },
          ),
        )),
      ) as _i6.Future<_i3.DocumentList>);

  @override
  _i6.Future<_i3.Document> createDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    required Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #permissions: permissions,
          },
        ),
        returnValue: _i6.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #createDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            },
          ),
        )),
      ) as _i6.Future<_i3.Document>);

  @override
  _i6.Future<_i3.Document> getDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    List<String>? queries,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #queries: queries,
          },
        ),
        returnValue: _i6.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #getDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #queries: queries,
            },
          ),
        )),
      ) as _i6.Future<_i3.Document>);

  @override
  _i6.Future<_i3.Document> updateDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
    Map<dynamic, dynamic>? data,
    List<String>? permissions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
            #data: data,
            #permissions: permissions,
          },
        ),
        returnValue: _i6.Future<_i3.Document>.value(_FakeDocument_2(
          this,
          Invocation.method(
            #updateDocument,
            [],
            {
              #databaseId: databaseId,
              #collectionId: collectionId,
              #documentId: documentId,
              #data: data,
              #permissions: permissions,
            },
          ),
        )),
      ) as _i6.Future<_i3.Document>);

  @override
  _i6.Future<dynamic> deleteDocument({
    required String? databaseId,
    required String? collectionId,
    required String? documentId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDocument,
          [],
          {
            #databaseId: databaseId,
            #collectionId: collectionId,
            #documentId: documentId,
          },
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);
}

/// A class which mocks [TestCRUDModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTestCRUDModel extends _i1.Mock implements _i7.TestCRUDModel {
  MockTestCRUDModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set tests(List<_i4.Test>? _tests) => super.noSuchMethod(
        Invocation.setter(
          #tests,
          _tests,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<_i4.Test> get testStream => (super.noSuchMethod(
        Invocation.getter(#testStream),
        returnValue: _i6.Stream<_i4.Test>.empty(),
      ) as _i6.Stream<_i4.Test>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<List<_i4.Test>?> fetchTests() => (super.noSuchMethod(
        Invocation.method(
          #fetchTests,
          [],
        ),
        returnValue: _i6.Future<List<_i4.Test>?>.value(),
      ) as _i6.Future<List<_i4.Test>?>);

  @override
  _i6.Stream<List<_i4.Test>> fetchTestsAsStream(String? motherId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTestsAsStream,
          [motherId],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchTestsAsStreamBabyBeat(String? motherId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTestsAsStreamBabyBeat,
          [motherId],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStream(String? orgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStream,
          [orgId],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStreamBabyBeat(
    String? orgId,
    String? docId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStreamBabyBeat,
          [
            orgId,
            docId,
          ],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStreamBabyBeatAll(String? docId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStreamBabyBeatAll,
          [docId],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStreamOrg(String? orgId) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStreamOrg,
          [orgId],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<_i4.Test> fetchTestById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchTestById,
          [id],
        ),
        returnValue: _i6.Stream<_i4.Test>.empty(),
      ) as _i6.Stream<_i4.Test>);

  @override
  void startLiveUpdates(String? docId) => super.noSuchMethod(
        Invocation.method(
          #startLiveUpdates,
          [docId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void stopLiveUpdates() => super.noSuchMethod(
        Invocation.method(
          #stopLiveUpdates,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStreamForTV(
    String? orgId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStreamForTV,
          [
            orgId,
            limit,
          ],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Stream<List<_i4.Test>> fetchAllTestsAsStreamOrgForTV(
    String? orgId,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTestsAsStreamOrgForTV,
          [
            orgId,
            limit,
          ],
        ),
        returnValue: _i6.Stream<List<_i4.Test>>.empty(),
      ) as _i6.Stream<List<_i4.Test>>);

  @override
  _i6.Future<_i4.Test> getTestById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getTestById,
          [id],
        ),
        returnValue: _i6.Future<_i4.Test>.value(_FakeTest_3(
          this,
          Invocation.method(
            #getTestById,
            [id],
          ),
        )),
      ) as _i6.Future<_i4.Test>);

  @override
  _i6.Future<void> removeTest(String? id) => (super.noSuchMethod(
        Invocation.method(
          #removeTest,
          [id],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateTest(
    _i4.Test? test,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTest,
          [
            test,
            id,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Document].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocument extends _i1.Mock implements _i3.Document {
  MockDocument() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get $id => (super.noSuchMethod(
        Invocation.getter(#$id),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#$id),
        ),
      ) as String);

  @override
  String get $collectionId => (super.noSuchMethod(
        Invocation.getter(#$collectionId),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#$collectionId),
        ),
      ) as String);

  @override
  String get $databaseId => (super.noSuchMethod(
        Invocation.getter(#$databaseId),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#$databaseId),
        ),
      ) as String);

  @override
  String get $createdAt => (super.noSuchMethod(
        Invocation.getter(#$createdAt),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#$createdAt),
        ),
      ) as String);

  @override
  String get $updatedAt => (super.noSuchMethod(
        Invocation.getter(#$updatedAt),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#$updatedAt),
        ),
      ) as String);

  @override
  List<String> get $permissions => (super.noSuchMethod(
        Invocation.getter(#$permissions),
        returnValue: <String>[],
      ) as List<String>);

  @override
  Map<String, dynamic> get data => (super.noSuchMethod(
        Invocation.getter(#data),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  Map<String, dynamic> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  T convertTo<T>(T Function(Map<dynamic, dynamic>)? fromJson) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertTo,
          [fromJson],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #convertTo,
            [fromJson],
          ),
        ),
      ) as T);
}

/// A class which mocks [Interpretations2].
///
/// See the documentation for Mockito's code generation for more information.
class MockInterpretations2 extends _i1.Mock implements _i10.Interpretations2 {
  MockInterpretations2() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set bpmList(List<int>? _bpmList) => super.noSuchMethod(
        Invocation.setter(
          #bpmList,
          _bpmList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set bpmListSmooth(List<int>? _bpmListSmooth) => super.noSuchMethod(
        Invocation.setter(
          #bpmListSmooth,
          _bpmListSmooth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get gestAge => (super.noSuchMethod(
        Invocation.getter(#gestAge),
        returnValue: 0,
      ) as int);

  @override
  set gestAge(int? _gestAge) => super.noSuchMethod(
        Invocation.setter(
          #gestAge,
          _gestAge,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set accelerationsList(List<_i11.MarkerIndices>? _accelerationsList) =>
      super.noSuchMethod(
        Invocation.setter(
          #accelerationsList,
          _accelerationsList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set decelerationsList(List<_i11.MarkerIndices>? _decelerationsList) =>
      super.noSuchMethod(
        Invocation.setter(
          #decelerationsList,
          _decelerationsList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set noiseList(List<_i11.MarkerIndices>? _noiseList) => super.noSuchMethod(
        Invocation.setter(
          #noiseList,
          _noiseList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set baselineBpmList(List<int>? _baselineBpmList) => super.noSuchMethod(
        Invocation.setter(
          #baselineBpmList,
          _baselineBpmList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get baselineEpochBpm => (super.noSuchMethod(
        Invocation.getter(#baselineEpochBpm),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set baselineEpochBpm(List<int?>? _baselineEpochBpm) => super.noSuchMethod(
        Invocation.setter(
          #baselineEpochBpm,
          _baselineEpochBpm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get millisecondsEpochBpm => (super.noSuchMethod(
        Invocation.getter(#millisecondsEpochBpm),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set millisecondsEpochBpm(List<int?>? _millisecondsEpochBpm) =>
      super.noSuchMethod(
        Invocation.setter(
          #millisecondsEpochBpm,
          _millisecondsEpochBpm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set millisecondsEpochBpmSmooth(List<int>? _millisecondsEpochBpmSmooth) =>
      super.noSuchMethod(
        Invocation.setter(
          #millisecondsEpochBpmSmooth,
          _millisecondsEpochBpmSmooth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get beatsInMilliseconds => (super.noSuchMethod(
        Invocation.getter(#beatsInMilliseconds),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set beatsInMilliseconds(List<int?>? _beatsInMilliseconds) =>
      super.noSuchMethod(
        Invocation.setter(
          #beatsInMilliseconds,
          _beatsInMilliseconds,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get beatsInMillisecondsSmooth => (super.noSuchMethod(
        Invocation.getter(#beatsInMillisecondsSmooth),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set beatsInMillisecondsSmooth(List<int?>? _beatsInMillisecondsSmooth) =>
      super.noSuchMethod(
        Invocation.setter(
          #beatsInMillisecondsSmooth,
          _beatsInMillisecondsSmooth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get millisecondsEpoch => (super.noSuchMethod(
        Invocation.getter(#millisecondsEpoch),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set millisecondsEpoch(List<int?>? _millisecondsEpoch) => super.noSuchMethod(
        Invocation.setter(
          #millisecondsEpoch,
          _millisecondsEpoch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get millisecondsEpochSmooth => (super.noSuchMethod(
        Invocation.getter(#millisecondsEpochSmooth),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set millisecondsEpochSmooth(List<int?>? _millisecondsEpochSmooth) =>
      super.noSuchMethod(
        Invocation.setter(
          #millisecondsEpochSmooth,
          _millisecondsEpochSmooth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get baselineEpoch => (super.noSuchMethod(
        Invocation.getter(#baselineEpoch),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set baselineEpoch(List<int?>? _baselineEpoch) => super.noSuchMethod(
        Invocation.setter(
          #baselineEpoch,
          _baselineEpoch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set cleanMillisecondsEpoch(List<int?>? _cleanMillisecondsEpoch) =>
      super.noSuchMethod(
        Invocation.setter(
          #cleanMillisecondsEpoch,
          _cleanMillisecondsEpoch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get cleanMillisecondsEpochBpm => (super.noSuchMethod(
        Invocation.getter(#cleanMillisecondsEpochBpm),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set cleanMillisecondsEpochBpm(List<int?>? _cleanMillisecondsEpochBpm) =>
      super.noSuchMethod(
        Invocation.setter(
          #cleanMillisecondsEpochBpm,
          _cleanMillisecondsEpochBpm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get cleanBaselineEpoch => (super.noSuchMethod(
        Invocation.getter(#cleanBaselineEpoch),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set cleanBaselineEpoch(List<int?>? _cleanBaselineEpoch) => super.noSuchMethod(
        Invocation.setter(
          #cleanBaselineEpoch,
          _cleanBaselineEpoch,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> get cleanBaselineEpochBpm => (super.noSuchMethod(
        Invocation.getter(#cleanBaselineEpochBpm),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  set cleanBaselineEpochBpm(List<int?>? _cleanBaselineEpochBpm) =>
      super.noSuchMethod(
        Invocation.setter(
          #cleanBaselineEpochBpm,
          _cleanBaselineEpochBpm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nAccelerations(int? _nAccelerations) => super.noSuchMethod(
        Invocation.setter(
          #nAccelerations,
          _nAccelerations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nDecelerations(int? _nDecelerations) => super.noSuchMethod(
        Invocation.setter(
          #nDecelerations,
          _nDecelerations,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set correctionCount(int? _correctionCount) => super.noSuchMethod(
        Invocation.setter(
          #correctionCount,
          _correctionCount,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int> get bpmCorrectedIndices => (super.noSuchMethod(
        Invocation.getter(#bpmCorrectedIndices),
        returnValue: <int>[],
      ) as List<int>);

  @override
  set bpmCorrectedIndices(List<int>? _bpmCorrectedIndices) =>
      super.noSuchMethod(
        Invocation.setter(
          #bpmCorrectedIndices,
          _bpmCorrectedIndices,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get basalHeartRate => (super.noSuchMethod(
        Invocation.getter(#basalHeartRate),
        returnValue: 0,
      ) as int);

  @override
  set basalHeartRate(int? _basalHeartRate) => super.noSuchMethod(
        Invocation.setter(
          #basalHeartRate,
          _basalHeartRate,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get longTermVariation => (super.noSuchMethod(
        Invocation.getter(#longTermVariation),
        returnValue: 0,
      ) as int);

  @override
  set longTermVariation(int? _longTermVariation) => super.noSuchMethod(
        Invocation.setter(
          #longTermVariation,
          _longTermVariation,
        ),
        returnValueForMissingStub: null,
      );

  @override
  double get shortTermVariationBpm => (super.noSuchMethod(
        Invocation.getter(#shortTermVariationBpm),
        returnValue: 0.0,
      ) as double);

  @override
  set shortTermVariationBpm(double? _shortTermVariationBpm) =>
      super.noSuchMethod(
        Invocation.setter(
          #shortTermVariationBpm,
          _shortTermVariationBpm,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get shortTermVariationMilli => (super.noSuchMethod(
        Invocation.getter(#shortTermVariationMilli),
        returnValue: 0,
      ) as int);

  @override
  set shortTermVariationMilli(int? _shortTermVariationMilli) =>
      super.noSuchMethod(
        Invocation.setter(
          #shortTermVariationMilli,
          _shortTermVariationMilli,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isSkipped => (super.noSuchMethod(
        Invocation.getter(#isSkipped),
        returnValue: false,
      ) as bool);

  @override
  set isSkipped(bool? _isSkipped) => super.noSuchMethod(
        Invocation.setter(
          #isSkipped,
          _isSkipped,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get fisherScore => (super.noSuchMethod(
        Invocation.getter(#fisherScore),
        returnValue: 0,
      ) as int);

  @override
  set fisherScore(int? _fisherScore) => super.noSuchMethod(
        Invocation.setter(
          #fisherScore,
          _fisherScore,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get fisherScore2 => (super.noSuchMethod(
        Invocation.getter(#fisherScore2),
        returnValue: 0,
      ) as int);

  @override
  set fisherScore2(int? _fisherScore2) => super.noSuchMethod(
        Invocation.setter(
          #fisherScore2,
          _fisherScore2,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get isDeceleration => (super.noSuchMethod(
        Invocation.getter(#isDeceleration),
        returnValue: false,
      ) as bool);

  @override
  set isDeceleration(bool? _isDeceleration) => super.noSuchMethod(
        Invocation.setter(
          #isDeceleration,
          _isDeceleration,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String getnAccelerationsStr() => (super.noSuchMethod(
        Invocation.method(
          #getnAccelerationsStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getnAccelerationsStr,
            [],
          ),
        ),
      ) as String);

  @override
  String getnDecelerationsStr() => (super.noSuchMethod(
        Invocation.method(
          #getnDecelerationsStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getnDecelerationsStr,
            [],
          ),
        ),
      ) as String);

  @override
  int getBasalHeartRate() => (super.noSuchMethod(
        Invocation.method(
          #getBasalHeartRate,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getLongTermVariation() => (super.noSuchMethod(
        Invocation.method(
          #getLongTermVariation,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  double getShortTermVariationBpm() => (super.noSuchMethod(
        Invocation.method(
          #getShortTermVariationBpm,
          [],
        ),
        returnValue: 0.0,
      ) as double);

  @override
  int getShortTermVariationMilli() => (super.noSuchMethod(
        Invocation.method(
          #getShortTermVariationMilli,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  String getBasalHeartRateStr() => (super.noSuchMethod(
        Invocation.method(
          #getBasalHeartRateStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getBasalHeartRateStr,
            [],
          ),
        ),
      ) as String);

  @override
  String getLongTermVariationStr() => (super.noSuchMethod(
        Invocation.method(
          #getLongTermVariationStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getLongTermVariationStr,
            [],
          ),
        ),
      ) as String);

  @override
  String getShortTermVariationBpmStr() => (super.noSuchMethod(
        Invocation.method(
          #getShortTermVariationBpmStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getShortTermVariationBpmStr,
            [],
          ),
        ),
      ) as String);

  @override
  String getShortTermVariationMilliStr() => (super.noSuchMethod(
        Invocation.method(
          #getShortTermVariationMilliStr,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #getShortTermVariationMilliStr,
            [],
          ),
        ),
      ) as String);

  @override
  void cleanBpmList() => super.noSuchMethod(
        Invocation.method(
          #cleanBpmList,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int?> convertBpmToMilli(List<int>? list) => (super.noSuchMethod(
        Invocation.method(
          #convertBpmToMilli,
          [list],
        ),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  void smoothBpm() => super.noSuchMethod(
        Invocation.method(
          #smoothBpm,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<int> getNoiseAreas(List<int>? list) => (super.noSuchMethod(
        Invocation.method(
          #getNoiseAreas,
          [list],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  void removeTrailingZeros(List<int>? list) => super.noSuchMethod(
        Invocation.method(
          #removeTrailingZeros,
          [list],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int getNextNonZeroBpm(
    int? index,
    List<int>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextNonZeroBpm,
          [
            index,
            list,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getNextValidBpm(
    int? index,
    List<int>? list,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNextValidBpm,
          [
            index,
            list,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int getWindowAvreage(
    List<int>? list,
    int? index,
    int? window,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWindowAvreage,
          [
            list,
            index,
            window,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int?> convertMilliToEpoch(List<int?>? millisecondBeats) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertMilliToEpoch,
          [millisecondBeats],
        ),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  List<int?> calculateEpochBpm() => (super.noSuchMethod(
        Invocation.method(
          #calculateEpochBpm,
          [],
        ),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  List<int?> calculateBaseLine(List<int?>? millisecondsEpoch) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateBaseLine,
          [millisecondsEpoch],
        ),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  int? getBaselineWindowSmoothAverage(
    List<int?>? list,
    int? index,
    int? window,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #getBaselineWindowSmoothAverage,
        [
          list,
          index,
          window,
        ],
      )) as int?);

  @override
  int getBaselineWindowAverage(
    List<int>? list,
    int? index,
    int? window,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBaselineWindowAverage,
          [
            list,
            index,
            window,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  List<int> convertBaselineArrayToBpmList(List<int?>? _baselineArray) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBaselineArrayToBpmList,
          [_baselineArray],
        ),
        returnValue: <int>[],
      ) as List<int>);

  @override
  List<int?> convertBaselineArrayToBpmEpoch(List<int?>? baselineArray) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBaselineArrayToBpmEpoch,
          [baselineArray],
        ),
        returnValue: <int?>[],
      ) as List<int?>);

  @override
  void removeNoiseMinutes() => super.noSuchMethod(
        Invocation.method(
          #removeNoiseMinutes,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int calculateAccelerations() => (super.noSuchMethod(
        Invocation.method(
          #calculateAccelerations,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  int calculateDecelerations() => (super.noSuchMethod(
        Invocation.method(
          #calculateDecelerations,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  void removeDecelerationMinutes() => super.noSuchMethod(
        Invocation.method(
          #removeDecelerationMinutes,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  int calculateLowVariationAvg(
    List<int?>? list,
    int? avgHR,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateLowVariationAvg,
          [
            list,
            avgHR,
          ],
        ),
        returnValue: 0,
      ) as int);

  @override
  int calculateAvgHeartRate(List<int?>? list) => (super.noSuchMethod(
        Invocation.method(
          #calculateAvgHeartRate,
          [list],
        ),
        returnValue: 0,
      ) as int);

  @override
  int calculateBasalHeartRate(List<int?>? list) => (super.noSuchMethod(
        Invocation.method(
          #calculateBasalHeartRate,
          [list],
        ),
        returnValue: 0,
      ) as int);

  @override
  void calculateShortTermVariability() => super.noSuchMethod(
        Invocation.method(
          #calculateShortTermVariability,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void calculateEpisodesOfLowAndHighVariation() => super.noSuchMethod(
        Invocation.method(
          #calculateEpisodesOfLowAndHighVariation,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String classify() => (super.noSuchMethod(
        Invocation.method(
          #classify,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #classify,
            [],
          ),
        ),
      ) as String);
}
